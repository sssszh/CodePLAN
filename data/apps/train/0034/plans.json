["1. Read the input value for the number of test cases.\n2. For each test case, read the input value for n.\n3. If n is odd (n%2 == 1), print \"7\" followed by \"1\"s (n-3)//2 times. This is because the largest possible number that can be formed using n digits with only 1s and 7s is when n is odd, as one of the digits will be 7. The remaining (n-3) digits can be filled with 1s. \n4. If n is even (n%2 == 0), print \"1\"s n//2 times. This is because the largest number that can be formed using n digits with only 1s is when n is even, as all digits will be 1.", "1. Read the input value for t, the number of test cases.\n2. For each test case, repeat the following steps:\n   a. Read the input value for n.\n   b. If n is odd, print a string with '7' as the first character and '1' repeated (n-3)//2 times.\n   c. If n is even, print a string with '1' repeated n//2 times.", "1. Read the input value for the number of test cases.\n2. For each test case, read the value of n.\n3. Check whether n is odd or not using the modulo operator. If n is odd, print \"7\" and subtract 3 from n.\n4. While n is non-zero, print \"1\" and subtract 2 from n.\n5. After printing all the \"1\"s, print a newline character to move to the next line.\n6. Repeat steps 2-5 for all test cases.", "1. Read the input value for T.\n2. For each kase in the range of T do the following:\n3. Read the input value for n.\n4. Check if n is odd using bitwise AND operator (&) with 1.\n5. If n is odd, print the string '7' concatenated with (n-3)//2 times the string '1'.\n6. If n is even, print n//2 times the string '1'.", "1. Read the number of test cases.\n2. For each test case, read the value of n.\n3. If n is odd (n % 2 == 1), then print a string: \"7\" followed by (n//2 - 1) \"1\"s.\n4. If n is even (n % 2 == 0), then print a string: n//2 \"1\"s, (integer division).\n5. Repeat steps 2-4 for each test case.", "1) Import sys module.\n2) Overwrite the built-in \"input\" method with the faster \"sys.stdin.readline\" method.\n3) Define the functions getInt(), getVars(), getList() and getStr() to read integer numbers, lists of integers and strings respectively from the input.\n4) Read an integer value \"t\" from the input, which represents the number of test cases.\n5) For each test case, read an integer value \"n\" from the input.\n6) If \"n\" is odd (n%2 == 1), print a string with a '7' as the first character and then append '1' to it (n//2 - 1) times. For example, if n=5, the output will be \"7111\".\n7) If \"n\" is even, print a string of '1's with a length of n/2. For example, if n=6, the output will be \"111\". \n8) Repeat this process for each of the t test cases.", "1. Read the input value of `t` - the number of test cases.\n2. Loop through for each test case. \n3. Read the input value of `n`.\n4. If `n` is even, print `1` `n//2` times.\n5. If `n` is odd, print `7` concatenated with `1` `((n-3)//2)` times, where `//` denotes integer division.\n6. Repeat this process for the remaining test cases.", "1. Read the input value for t, which represents the number of test cases.\n2. Enter a loop that runs t times using the range function.\n3. For each iteration, read the input value for n, which is the length of the output string.\n4. Determine the number of times \"7\" and \"1\" should be repeated in the output string using the formula:\n   - Repeat \"7\" one time if n is odd (n % 2 == 1), and otherwise repeat \"7\" zero times (n % 2 == 0).\n   - Repeat \"1\" (n // 2 - (n % 2)) times.\n5. Print the output string, which consists of the repeated \"7\" and \"1\" characters concatenated together.", "1. Read a value `t` from the input, which indicates the number of test cases.\n2. For each test case (`for i in range(t)`), do the following:\n   a. Read a value `n` from the input.\n   b. Initialize an empty string called `arr`.\n   c. Check if `n` is odd (i.e., `n % 2 == 1`). If it is, add the digit '7' to `arr`, and then add the digit '1' to `arr` (n-3)/2 times using the `range()` function and a `for` loop.\n   d. If `n` is even, add the digit '1' to `arr` n/2 times using the `range()` function and a `for` loop.\n   e. Print the final value of `arr`.", "1. Import required modules, such as sys, math, itertools, functools, and collections.\n2. Define helper functions such as ii(), mi(), li(), lcm(), revn(), dd(), ddl(), sieve(), divs(), divn(), prime(), and convn().\n3. Define a function cdiv(n, k) which calculates the ceiling of the result of n divided by k.\n4. Read the number of test cases t.\n5. For each test case:\n  - Read the value n.\n  - If n is odd, print a string consisting of a '7' character followed by a number of '1' characters that is equal to (n - 3) divided by 2.\n  - If n is even, print a string consisting of a number of '1' characters that is equal to n divided by 2.", "1. Read the input value for t, which represents the number of test cases.\n2. Loop through t times using a for loop.\n3. Read the input value for n, which represents the length of a string to be created.\n4. Create an empty string `s`.\n5. If n is odd (n % 2 equals 1), append '7' to the string `s` and subtract 3 from n. Else, append '1' to the string `s` and subtract 2 from n.\n6. Append '1' repeated `n // 2` times to the string `s`.\n7. Print the final string `s`.", "1. Read the input value for the number of test cases, t.\n2. Loop through each test case by iterating over range(t) using a for loop.\n3. Read the input value for n for the current test case.\n4. Check if n is even (n%2==0). If it is even, print \"1\" times the integer division of n by 2 (n//2). If it is odd, move to the next step.\n5. If n is odd, print the string \"7\" followed by \"1\" times ((n-3)//2) where \"//\" is the integer division operator. This expression computes the number of times to repeat the \"1\" character in the string based on the value of n.", "1. Read the input value for t, which is the number of test cases.\n2. Repeat for each test case.\n3. Read the input value for n.\n4. If n is even, print the string \"1\" repeated n/2 times.\n5. If n is odd, print the string \"7\" followed by the string \"1\" repeated (n-3)/2 times.", "1. Read the input value, which is the number of test cases. \n2. For each test case, read the value of 'n'.\n3. Check if 'n' is even. If it is, print a string of '1's of length `n//2`.\n4. If 'n' is odd, print the string '7' followed by a string of '1's of length `(n//2)-1`.\n5. Repeat steps 2 to 4 for each test case.", "1. Read the input value for t, which represents the number of test cases.\n2. Enter a while loop that will iterate t times.\n3. Decrement the value of t by 1 during each iteration.\n4. Read the input value for n, which represents the length of the sequence to be printed.\n5. Check if n is even (n % 2 == 0). If it is, print the string \"1\" repeated n/2 times.\n6. If n is odd, print the string \"7\" plus the string \"1\" repeated (n-3)/2 times. This is because if n is odd, it can be written as 7 plus an even number. The even number can be formed by repeating the digit 1.", "1. Read the input value t.\n2. Loop through range(t) to execute the following steps t times:\n3. Read the input value n.\n4. Check if n is even (n % 2 == 0). If it is, print the string '1' repeated n//2 times.\n5. If n is odd, print the string '7' followed by '1' repeated (n//2)-1 times. Here, `//` is used for integer division, i.e., the result will be rounded down to the nearest integer.", "1. Read the input value for t.\n2. While t is not equal to 0, do the following:\n3. Read the input value for n.\n4. Calculate the number 'o' using the following steps:\n   a. Initialize a string 'o' with '1' repeated a number of times equal to n divided by 2. This is because if we repeat '1' n divided by 2 times, we get the maximum possible number that is less than 10^n.\n   b. If n is odd, replace the first digit of 'o' with '7'. This is because the maximum possible number that is less than 10^n and has an odd number of digits starts with '7'.\n5. Print the value of 'o'.\n6. Decrement the value of t by 1. This will cause the loop to eventually terminate.", "1. Read the input value for \"n\".\n2. Loop through \"n\" times.\n3. Read the input value for \"d\".\n4. If \"d\" is odd, calculate \"e\" (the number of times that the digit '1' is repeated) by subtracting 3 from \"d\" and dividing the result by 2. Then, create the string \"s\" by concatenating '7' with the digit '1' repeated \"e\" times.\n5. If \"d\" is even, calculate \"e\" by dividing \"d\" by 2. Then, create the string \"s\" by repeating the digit '1' \"e\" times.\n6. Print the string \"s\". Repeat steps 3-6 \"n\" times.", "1. Read the input value for t, the number of test cases.\n2. For each test case, read the input value for n.\n3. If n is even, print the string \"1\" repeated n//2 times.\n4. If n is odd, print the string \"7\" followed by \"1\" repeated (n//2)-1 times.", "1. Read the input value for `t` - the number of test cases.\n2. Loop through each test case using the `_` variable to represent the iterator variable. \n3. Read the input value for `n` - the number to be evaluated.\n4. Check if `n` is even by calculating the remainder when divided by `2`. If the remainder is zero, then `n` is even.\n5. If `n` is even, set `x` to be `n` divided by `2`. This determines the number of times the digit `1` will be printed.\n6. Use a `for` loop to loop `x` number of times and print the digit `1` on each iteration. The `end=''` statement is used to keep the output on the same line.\n7. If `n` is odd, subtract `1` from `x` and set the first digit to be `7`. This ensures that the number is maximal while still being evaluated in an odd number of digits.\n8. Use a `for` loop to loop `x` number of times and print the digit `1` on each iteration.\n9. Print a newline character to move to the next line. \n10. Repeat steps 3-9 for each test case."]