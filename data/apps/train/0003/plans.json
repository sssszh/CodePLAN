["1. Read input for the number of test cases.\n2. For each test case, read input values for n and k.\n3. Read a list of n integers.\n4. Sort the list of integers.\n5. Initialize ans to 0.\n6. Iterate over the range from n-k-1 to n-1.\n7. Add the value of lst[i] to ans in each iteration.\n8. Print the value of ans.\n9. Repeat steps 2-8 for each test case.", "1. Read the input value for t, which indicates the number of test cases.\n2. For each test case, read the input values for n and k. These values represent the length of the array a, and the number of elements to consider in the summation, respectively.\n3. Read the array a as integers using input() and list comprehension.\n4. Sort the array a in descending order using the sort() method on list.\n5. Sum the first k+1 elements of the array a using the slice notation a[:k+1] and the sum() built-in function.\n6. Print the result of step 5.\n7. Repeat steps 2-6 for each of the t test cases.", "1. Read the input value for `rw`, which specifies the number of test cases.\n2. For each test case:\n    a. Read the input values for `n` and `k`, where `n` is the number of elements in the list and `k` is the number of elements to be selected.\n    b. Read `n` space-separated integers and store them in a list `a`.\n    c. Sort the list `a` in descending order.\n    d. Initialize the variable `f` to 0.\n    e. Iterate over the range from 0 to `k`, adding the `i`-th largest element of `a` to `f`.\n    f. Print the value of `f` for the current test case. \n3. Repeat step 2 for all `rw` test cases.", "1. Read the input value for t, which is the number of test cases.\n2. Loop through t test cases using a for loop.\n3. Read the input values l, n and k for each test case.\n4. Convert the values in l string to integers and store them in a list using list comprehension.\n5. Check if k is equal to 0. If so, print the difference between the maximum and minimum values in the list and continue to the next test case using the continue statement.\n6. Set a counter variable z to 0 and sort the list in descending order.\n7. Loop through the first k+1 values of the sorted list and add them to z.\n8. Print the final value of z.", "1. Read the input value for the number of test cases.\n2. For each test case, read input values for the number of elements in the array and the number of elements to be modified.\n3. Read input values for the array and store them in a list.\n4. Sort the list in descending order.\n5. For the first k+1 elements, add the maximum value to the first element and set the remaining elements to zero.\n6. Calculate the difference between the first and second elements in the modified list, and print the result. \n7. Repeat steps 2-6 for each test case.", "1. Read the number of iterations from the user and run a for loop.\n2. Read two integers n and k from the user.\n3. Read a list of integers from the user and store it in the ar variable.\n4. Sort the list in descending order.\n5. Set a variable ans equal to zero.\n6. Run another for loop with the range being minimum of the length of ar and k+1.\n7. In each iteration of the loop, add the ith element of ar to ans.\n8. Print the final value of ans. \n\nThe code seems to perform a task of finding the sum of the k largest numbers in a list of n integers.", "1. Import necessary modules such as sys, math, io, os, bisect, heapq, collections, etc.\n2. Use the `data()` function to read input values from the standard input stream.\n3. Use the `mdata()` function to split the input strings into integers and store them in variables `n` and `k`.\n4. Use the `sorted()` function to sort the integers in descending order and store them in variable `a`.\n5. Sum the first k+1 integers in the sorted array `a` and store the result in variable `s`.\n6. Print the value of `s` using the `out()` function. \n7. Repeat steps 3 to 6 for each test case in the input.", "1. Import the sys module for reading input from the command line.\n2. Use sys.stdin.readline to read the number of test cases, t.\n3. Loop over the range of test cases.\n4. For each test case, read the values of n and k from the input line and store them in variables.\n5. read the list of integers, a, from the input line using map and list functions.\n6. Sort the list in descending order using a.reverse() method.\n7. Create a list, cum, to store the cumulative sum of a.\n8. Iterate over the list of integers and compute the cumulative sum, cum, of the elements of a.\n9. Compute the cumulative sum of a and append it to the end of the cum list.\n10. Print the kth element from the cum list.", "1. Read input value t from the user which represents the number of test cases.\n2. Loop through the range of t and perform the following operations:\n   a. Read input values n and k from the user.\n   b. Read a list of integers a from the user.\n   c. Sort the list a in non-decreasing order.\n   d. Initialize variable s to 0.\n   e. Loop from 0 to (k+1), adding the n-i-1th element of a to s each time.\n   f. Print the value of s. \n3. Repeat steps 2 until all test cases have been processed.", "1. Define the function named \"main\".\n2. The function reads two integers \"N\" and \"K\" from input using \"input().split()\" and \"list(map(int, ...))\".\n3. The function reads a list of integers \"A\" from input using \"*\" for \"unpacking\" to receive a list as input and a similar list comprehension.\n4. Sorting the list of integers \"A\" in ascending order using \"A.sort()\".\n5. Print the sum of the last \"K\" integers in the sorted list \"A\" and the highest integer in the list \"A\".\n6. Define a function named \"_starting_point\".\n7. Convert the string input(N) into an integer using \"int(input())\".\n8. Execute the \"main\" function \"N\" times using a for loop with range (0, N).", "1. Import necessary libraries/modules such as `sys`, `random`, `math`, `heapq`, `functools`, `bisect`, `collections`. \n2. Set `INF` to infinity and `MOD` to `10 ** 9 + 7`. \n3. Define a lambda function called `divide` that performs modular division with a given value `x`. \n4. Define a function called `judge` that takes in six parameters `at`, `ax`, `ay`, `bt`, `bx`, and `by`. This function checks whether the absolute difference between `at` and `bt` is greater than or equal to the sum of the absolute differences between `ax` and `bx` and `ay` and `by`.\n5. Define the main function, `solve()`. \n6. Read the input values for `n` and `k`. \n7. Read the list of integers `li`. \n8. If `k` is greater than or equal to `n`, print the sum of all values in `li` and return. \n9. Sort the list of integers `li` in descending order. \n10. Print the sum of the first `k+1` elements in `li`. \n11. Define a main function called `main()` that reads an integer `n` and calls the `solve()` function `n` times. \n12. Call the `main()` function at the end of the script.", "1. Import the `stdin` function from the `sys` module.\n2. Read the input value for `t` (number of test cases).\n3. For each test case, read the input values `n` and `k` as a tuple using `stdin` and `split`.\n4. Read the list `lst` of integers from the input using `stdin` and `split`, convert the list to integers with `int`, and sort the list using `sorted`.\n5. Print the sum of the largest `k` numbers in `lst`.\n6. Repeat steps 3-5 for each test case (using the `range` function along with the `_` variable as a placeholder for the loop variable).", "1. Read input t, the number of test cases.\n2. Loop through each test case:\n    a. Read the values of n and k.\n    b. Read the list of n integers.\n    c. Sort the list in descending order.\n    d. Take the minimum between k+1 and n (to avoid going out of index).\n    e. Sum the values of the list up to the minimum value found in step d.\n    f. Print the sum calculated in step e.\n3. End of program.", "1. Read the number of test cases to run.\n2. For each test case, read the values of n and k.\n3. Read a list of n integers and store them in the variable A.\n4. Sort the list A in descending order.\n5. If k is equal to 0, print the difference between the maximum and minimum values of A.\n6. If k is greater than 0, print the sum of the first k values of A, plus the maximum value of A.", "1. Reads the input integer and stores it in the variable n.\n2. For each loop iteration from 0 to n-1, do the following:\n    a. Read in integers n and k from input, separated by a space, and store them in variables n and k, respectively.  \n    b. Read in a list of integers from input, separated by spaces, and store it in the variable arr.\n    c. Sort the list in descending order using the sort() function.\n    d. Print the sum of the first k+1 elements of the sorted array, using slicing with arr[:k+1].", "1. Read the input value for T, which is the number of test cases.\n2. For each test case, read the values of n and k.\n3. Read the list s of n integers.\n4. Sort the list s in non-decreasing order.\n5. Reverse the order of the list s.\n6. Iterate from the second element to the k-th element in the list s.\n7. Add each of these elements to the first element of the list s.\n8. Print the first element of the list s, which will contain the result of the calculations. \n9. Repeat steps 2-8 for all T test cases.", "1. Take an input t, which represents the number of test cases.\n2. While t is not equal to 0, do the following:\n3. Take input values n and k where n represents the number of elements in a list and k represents the number of elements to be summed up.\n4. Create a list 'a' of n integers by taking input from the user.\n5. Sort the list in ascending order.\n6. Set a variable 'ans' to 0.\n7. Reverse the sorted list 'a'.\n8. Starting from the 0th index of the list 'a' up to the kth index, add each element to the variable 'ans'.\n9. Print the final value of variable 'ans'."]