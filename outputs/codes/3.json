{"3": {"codes": ["n, q = list(map(int, input().split()))\npainters = []\n\nfor _ in range(q):\n\tl, r = list(map(int, input().split()))\n\tpainters.append((l, r))\n\npainters.sort()\n\n#print(painters)\n\n#print(len(painters) // 2)\n\n#print(len(painters) - 1)\n\n#print(len(painters) - 2)\n\n#print(len(painters) - 2, len(painters) - 1)\n\n#print(len(painters) - 2, len(painters) - 1)\n\n#print(len(painters) - 1, len(painters) - 2, len(painters) - 3)\n\n#print(len(painters) - 2)\n\nanswer = 0\n\n#print(len(painters) - 1)\n\n#print(len(painters) - 2)\n\n#print(len(painters) - 2, len(painters) - 3)\n\n#print(len(painters) - 2)\n\n#print(len(painters) - 2, len(painters) - 3)\n\n#print(len(painters) - 2, len(painters) - 3, len(painters) - 4)\n\n#print(len(painters) - 2, len(painters) - 3, len(painters) - 4)\n\n#print(len(painters) - 2, len(painters) - 3, len(painters) - 4)\n\n#print(len(painters) - 2, len(painters) - 3, len(painters) - 4, len(painters) - 5)\n\n#print(len(painters) - 2, len(painters) - 3, len(painters) - 4, len(painters) - 5)\n\n#print(len(painters) - 2, len(painters) - 3, len(painters)", "def main():\n\tn, q = list(map(int, input().split()))\n\tp = [tuple(map(int, input().split())) for i in range(q)]\n\tp.sort()\n\tl, ans = 0, 0\n\tfor i in range(q - 2):\n\t\twhile l < p[i][0] and l < p[i + 1][1]:\n\t\t\tl += 1\n\t\tans += i + 1\n\t\tl = p[i][0]\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from sys import stdin, stdout\nfrom bisect import bisect_left\nn, q = list(map(int, stdin.readline().split()))\npainters = [tuple(map(int, stdin.readline().split())) for _ in range(q)]\n\nans = 0\npainters.sort()\n\nleft = [-1] * n\nright = [n] * n\n\nfor i in range(q):\n\tleft[painters[i][0]] = i\n\tright[painters[i][1]] = i\n\nfor i in range(n):\n\tlefti = bisect_left(left, painters[i][0])\n\trighti = bisect_left(right, painters[i][1])\n\n\tif righti - lefti <= 2:\n\t\tans += right[i] - left[lefti]\n\nprint(ans)\n", "from sys import stdin, stdout\nfrom collections import defaultdict\n\nn, q = list(map(int, stdin.readline().split()))\npainters = [tuple(map(int, stdin.readline().split())) for i in range(q)]\n\n# print(painters)\n\nsorted_painters = sorted(painters)\n\n# print(sorted_painters)\n\npainters_cnt = defaultdict(int)\n\nfor p in sorted_painters:\n\tpainters_cnt[p[0]] += 1\n\tpainters_cnt[p[1]] += 1\n\n# print(painters_cnt)\n\ndef get_painters_cnt(sorted_painters):\n\tpainters_cnt_sorted = sorted(list(painters_cnt.items()), key=lambda x: x[0])\n\tpainters_cnt_sorted_mult = [x[1] for x in painters_cnt_sorted]\n\t# print(painters_cnt_sorted)\n\t# print(painters_cnt_sorted)\n\treturn painters_cnt_sorted_mult\n\n# print(get_painters_cnt(sorted_painters))\n# print(get_painters_cnt(sorted_painters_mult))\n\npainters_cnt_mult_sorted = get_painters_cnt(painters_cnt_sorted)\n\n# print(painters_cnt_mult_sorted)\n\nmin_painters_cnt = n\n\nfor p in painters_cnt_mult_sorted:\n\tif p < min_painters_cnt:\n\t\tmin_painters_cnt = p\n\n# print(min_painters_cnt)\n\n# print(painters_cnt_mult_sorted)\n\n# print(len(painters_cnt_mult_sorted))\n\n# print(painters_cnt)\n# print(painters_cnt_mult_sorted)\n\nanswer = 0\n\nfor i in range(q-2):\n\tl, r = painters_cnt_mult_sorted[i]\n\t# print", "n, q = list(map(int, input().split()))\np = [tuple(map(int, input().split())) for i in range(q)]\np.sort()\n\nans = 0\n\n\ndef bin_search(arr, v):\n\tlo, hi = 0, len(arr) - 1\n\twhile lo <= hi:\n\t\tmid = (lo + hi) // 2\n\t\tif arr[mid][0] == v:\n\t\t\treturn mid\n\t\telif arr[mid][0] < v:\n\t\t\tlo = mid + 1\n\t\telse:\n\t\t\thi = mid - 1\n\n\treturn -1\n\n\nfor i in range(q - 2):\n\tif i == 0:\n\t\tans += bin_search(p, p[i][1]) - 1\n\t\tcontinue\n\tif i == q - 2:\n\t\tans += bin_search(p, p[i][1])\n\t\tcontinue\n\tif bin_search(p, p[i][1]) < bin_search(p, p[i + 1][1]):\n\t\tans += bin_search(p, p[i][1])\n\telse:\n\t\tans += bin_search(p, p[i + 1][1])\n\nprint(ans)\n", "import sys\n# sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\n# m=pow(10,9)+7\nn,q=list(map(int,input().split()))\n# n,k=map(int,input().split())\n# l=list(map(int,input().split()))\nr=[]\nc=0\nfor i in range(q):\n\tl,r=list(map(int,input().split()))\n\tr.append(r-l+1)\n\tc+=1\n# print(r)\nr.sort()\n# print(r)\nans=0\nfor i in range(q-2):\n\tans+=r[i]\nprint(ans)\n", "from sys import stdin, stdout\nfrom bisect import bisect_left\n\nn, q = list(map(int, stdin.readline().split()))\npainters = [tuple(map(int, stdin.readline().split())) for _ in range(q)]\n\npainters.sort()\n\nans = 0\n\n#print(painters)\n\n#print(sorted(painters, key=lambda x: x[0]))\n\n#print(sorted(painters, key=lambda x: x[1]), key=lambda x: x[2], reverse=True)\n\n#print(sorted(painters, key=lambda x: x[2]), key=lambda x: x[0])\n\n#print(sorted(painters, key=lambda x: x[1]), key=lambda x: x[2])\n\n#print(sorted(painters, key=lambda x: x[2]), key=lambda x: x[0], reverse=True)\n\n#print(sorted(painters, key=lambda x: x[2], reverse=True), key=lambda x: x[1])\n\n#print(len(sorted(painters, key=lambda x: x[2])))\n\n#print(len(painters) - 2, len(painters) - 1, len(painters) - 3, len(painters) - 4)\n\n#print(bisect_left(painters, (3, 2)), bisect_left(painters, (3, 1)))\n\n#print(bisect_left(painters, (3, 3)), bisect_left(painters, (3, 4)))\n\n#print(bisect_left(painters, (3, 5)), bisect_left(painters, (3, 6)))\n\n#print(bisect_left(painters, (3, 7)), bisect_left(painters, (3, 8)))\n\n#print(bisect_left(painters, (3, 9)), bisect_left(painters, (3, 10)))\n\n#print(bisect_left(pain", "# https://codeforces.com/contest/1265/problem/A\nfrom sys import stdin\n\n\ndef read_int():\n\treturn int(stdin.readline())\n\n\ndef read_ints():\n\treturn list(map(int, stdin.readline().split()))\n\n\nn, q = read_ints()\npainters = []\nfor i in range(q):\n\tl, r = read_ints()\n\tpainters.append((l, r))\npainters.sort()\n\n\n# print(painters)\n\n# print(len(painters) // 2)\n\n# print(len(painters) % 2)\n\ncnt = [0] * (n + 1)\nfor i in range(len(painters) - 2):\n\tl, r = painters[i]\n\tcnt[l] += 1\n\tcnt[r + 1] -= 1\n# print(cnt)\n\nprint(sum(cnt))\n", "n, q = list(map(int, input().split()))\nl = [0] * (n + 2)\nr = [0] * (n + 2)\nans = 0\nfor i in range(q):\n\tl1, r1 = list(map(int, input().split()))\n\tl[l1] = min(l[l1], r1)\n\tr[r1] = max(r[r1], l1)\n\tans += r[r1] - l[l1]\nprint(ans)\n", "from sys import stdin\nn, q = list(map(int, stdin.readline().split()))\npainters = [tuple(map(int, stdin.readline().split())) for _ in range(q)]\n\npainters.sort()\n\nans = 0\n\nwhile painters:\n\n\tl, r = painters.pop()\n\n\tif l > r:\n\t\tr = l\n\n\tans += 1\n\n\tl = min(l, r)\n\n\tfor i in range(r, l - 1, -1):\n\t\tif painters[i] < (l, r):\n\t\t\tpainters.append((l, i))\n\t\t\tans += 1\n\t\t\tbreak\n\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\nfrom bisect import bisect_left as bl\nn, q = map(int, input().split())\nA = [list(map(int, input().split())) for i in range(q)]\nA.sort()\nans = 0\nL = []\nfor i in range(q-2):\n\tl, r = A[i]\n\tif len(L) == 0:\n\t\tans += (r-l+1)\n\t\tL.append((r-l+1, l, r-l+1))\n\telse:\n\t\tif L[0][0] < l:\n\t\t\tans += (L[-1][1]-L[-2][1])\n\t\t\tL.pop()\n\t\telse:\n\t\t\tans += (r-L[-2][1])\n\t\t\tL.pop()\nprint(ans)\n", "def solve(n, q, edges):\n\t#print(n, q, edges)\n\tif n < 3:\n\t\treturn n\n\t#print(edges)\n\tans = 0\n\tleft = 0\n\tright = n-1\n\tfor i in range(q):\n\t\tl, r = sorted(map(int, input().split()))\n\t\twhile left < right:\n\t\t\tmid = (left + right) // 2\n\t\t\tif edges[mid][0] < l and edges[mid+1][0] <= r:\n\t\t\t\tans += 1\n\t\t\t\tleft = mid+1\n\t\t\telif edges[mid][0] > l and edges[mid+1][0] <= r:\n\t\t\t\tans += 1\n\t\t\t\tright = mid-1\n\t\t\telse:\n\t\t\t\tleft = mid+1\n\t\t\t\tright = mid-1\n\treturn ans\n\nn, q = list(map(int, input().split()))\nedges = [[] for _ in range(n)]\nans = 0\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n\tedges[l-1].append(r-1)\n\tedges[r-1].append(l-1)\nprint(solve(n, q, edges))\n", "def main():\n\tn, q = map(int, input().split())\n\tl_r = [list(map(int, input().split())) for i in range(q)]\n\n\tl_r.sort()\n\n\tcnt = 0\n\n\tfor i in range(q - 2):\n\t\tl, r = l_r[i]\n\n\t\tif r - l <= cnt:\n\t\t\tcontinue\n\n\t\tcnt += r - l\n\n\tprint(cnt)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "import sys\ninput = sys.stdin.readline\nfrom bisect import bisect_left as bl\nn, q = list(map(int, input().split()))\np = [list(map(int, input().split())) for i in range(q)]\np.sort()\n\nans = 0\ncnt = 0\nL = []\nfor i in range(q):\n\twhile len(L) and p[i][0]<=p[L[-1][0]]:\n\t\tcnt-=1\n\t\tL.pop()\n\tL.append((p[i][1], i))\n\tif cnt<=0:\n\t\tans+=1\n\t\tcnt = 0\nprint(ans)\n", "from sys import stdin\nfrom collections import defaultdict\nfrom bisect import bisect_left as bl\n\nn, q = list(map(int, stdin.readline().split()))\nA = [list(map(int, stdin.readline().split())) for i in range(q)]\n\nans = 0\n\nA.sort()\n\n# print(A)\n\n# print(bl(A, (i[1] for i in A)))\n\nfor i in range(1, q):\n\t# print(bl(A, (i[0] for i in A)))\n\tans += (bl(A, (i[1] for i in A))) - 2\n\n# print(ans)\n\nprint(ans)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport sys\nfrom bisect import bisect_left\n\nn, q = list(map(int, sys.stdin.readline().split()))\npainters = [list(map(int, sys.stdin.readline().split())) for i in range(q)]\n\nans = 0\np = []\nfor i in range(q-2):\n\tif len(p) == 0:\n\t\tp.append((painters[i][1], 1))\n\t\tans += 1\n\t\tcontinue\n\tif painters[i][0] > p[0][1]:\n\t\tcontinue\n\tl, c = p[0]\n\tif len(p) == 1:\n\t\tp.append((painters[i][1], c+1))\n\t\tans += c+1\n\t\tcontinue\n\tif p[1] < c:\n\t\tbreak\n\tp.append((painters[i][1], c+1))\n\tans += c+1\n\t#print(p)\nprint(ans)\n", "from sys import stdin\nfrom bisect import bisect_left as bl\ninput=stdin.readline\n#n,q=map(int,input().split())\n#l=list(map(int,input().split()))\n#l1=[]\n#for i in range(q):\n#    l,r=map(int,input().split())\n#    l1.append((l,r))\n#print(l1)\nl=[]\nfor i in range(q-2):\n\tl1=list(map(int,input().split()))\n\tl.append(l1)\n#print(l)\nans=0\n#print(l1)\nl1=sorted(l)\n#print(l1)\nfor i in range(len(l1)):\n\tans+=len(set(l1[i:i+2]))\nprint(ans)\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int,minp().split()))\n\ndef solve():\n\tn,q = mints()\n\tp = [0]*n\n\tfor i in range(q):\n\t\ta,b = mints()\n\t\tp[a-1] = 1\n\t\tp[b-1] = 1\n\tres = 0\n\tfor i in range(n):\n\t\tif p[i] == 1:\n\t\t\tres += 1\n\tprint(res)\n\nsolve()\n", "from sys import stdin, stdout\nn, q = [int(x) for x in stdin.readline().split()]\nl_p = [tuple([int(x) for x in stdin.readline().split()]) for _ in range(q)]\n\nans = 0\nl_p.sort()\n\n# print(l_p)\n\n# q = 3\n# l_p = [(1,1),(1,2),(2,1),(2,3),(3,1),(3,2),(4,1),(4,2)]\n\n# print(q)\n\n# q = 3\n# l_p = [(1,1),(1,2),(1,3),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2)]\n\n# print(l_p)\n\n# q = 4\n# l_p = [(1,1),(1,2),(1,3),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2)]\n\n# print(l_p)\n\n\n# q = 5\n# l_p = [(1,1),(1,2),(1,3),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2)]\n\n# print(l_p)\n\n# q = 6\n# l_p = [(1,1),(1,2),(1,3),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2)]\n\n\n# q = 7\n# l_p = [(1,1),(1,2),(1,3),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2)]\n\n# print(q)\n\n# q = 8\n# l_p = [(1,1),(1,2),(1,3),(2,1),(2,2),(3,1),(3,", "def main():\n\tn, q = map(int, input().split())\n\tp = [tuple(map(int, input().split())) for _ in range(q)]\n\n\tp.sort()\n\n\tl = 0\n\tans = 0\n\tfor i in range(q - 2):\n\t\twhile l < len(p) and p[l][0] <= p[i][1]:\n\t\t\tl += 1\n\t\tif l == len(p):\n\t\t\tbreak\n\t\tans += 1\n\t\tl += 1\n\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "n,q = list(map(int,input().split()))\nl_p = [0]*(n+1)\nr_p = [0]*(n+1)\nans = 0\nfor i in range(q):\n\tl,r = list(map(int,input().split()))\n\tl_p[l] = min(l_p[l],r)\n\tr_p[r] = max(r_p[r],l)\nfor i in range(1,n+1):\n\tif l_p[i] <= r_p[i]:\n\t\tans += 1\nprint(ans)\n", "n, q = list(map(int, input().split()))\n\n\narr = []\nfor i in range(n):\n\tarr.append([])\n\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n\tarr[l-1].append(r-1)\n\n\nans = 0\n\nfor i in range(n):\n\tfor j in range(1, min(n-1, arr[i])):\n\t\tif arr[i] and arr[i][j] >= j:\n\t\t\tans += 1\n\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn, q = list(map(int, input().split()))\na = [list(map(int, input().split())) for i in range(q)]\na.sort()\nans = 0\ncnt = 0\nfor i in range(q - 2):\n\tl, r = a[i]\n\tans += 1\n\tcnt += (r - l + 1)\n\tif cnt >= n:\n\t\tbreak\n\ta[i + 1] = (l, r)\nif cnt >= n:\n\tprint(n - ans)\nelse:\n\tm = a[q - 2][0]\n\tcnt -= 1\n\tfor i in range(q - 2, -1, -1):\n\t\tl, r = a[i]\n\t\tif cnt < l:\n\t\t\tbreak\n\t\tif cnt >= m:\n\t\t\tans += 1\n\t\t\tm = r\n\t\tcnt -= (r - l + 1)\n\t\tif cnt >= n:\n\t\t\tbreak\nprint(ans)\n", "n, q = map(int, input().split())\np = [list(map(int, input().split())) for i in range(q)]\np.sort()\n\n# print(p)\n\nans = 0\n\n# print(p[::-1])\n\n# print(len(p[::-1]))\n\n# print(p)\n\n# print(p[::-1][:2])\n\n# print(len(p[::-1]) - 2)\n\n# print(p[::-1][2:5])\n\n# print(len(p[2:5]) - 1)\n\n# print(p[2:5][1:3])\n\n# print(len(p[2:5]) - 2)\n\n# print(p[2:5][3:7])\n\n# print(len(p[2:5]) - 2)\n\n# print(p[2:5][3:7])\n\n# print(len(p[2:5]) - 2)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 2)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 2)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n# print(len(p[2:5]) - 3)\n\n", "from sys import stdin, stdout\nfrom collections import defaultdict\nfrom bisect import bisect_left\nn, q = list(map(int, stdin.readline().split()))\na = []\nans = 0\nfor i in range(q):\n\tl, r = list(map(int, stdin.readline().split()))\n\ta.append((l, r))\n\na.sort()\n\ndp = [0] * (n+1)\nfor i in range(1, n+1):\n\tdp[i] = dp[i-1]\n\nfor i in range(1, q):\n\tl, r = a[i]\n\tif l == r:\n\t\tdp[l] = 1\n\t\tcontinue\n\tm = 1\n\tfor j in range(l, r+1):\n\t\tif dp[j] < m:\n\t\t\tm = dp[j]\n\t\t\tans += 1\n\tdp[r] = m\n\nprint(ans)\n", "def solve(N, Q, A):\n\t# F[i] = number of sections with min(l, r) painters seen\n\t# S[i] = # of painted sections with max(l, r) painters seen\n\n\tINF = 10**9\n\n\tp = [0] * (N+1)\n\tfor a, b in A:\n\t\tp[a] += 1\n\t\tp[b] -= 1\n\n\t# print(p)\n\n\tres = 0\n\tfor i in range(1, N+1):\n\t\tif p[i] == 0:\n\t\t\tcontinue\n\t\tres += i\n\t\t# print(i, p[i], p[i-1])\n\treturn res\n\n\ndef main():\n\tN, Q = map(int, input().split())\n\tA = [tuple(map(int, input().split())) for _ in range(Q)]\n\n\t# print(A)\n\tprint(solve(N, Q, A))\n\nmain()\n", "n,q=map(int,input().split())\nA=[[0 for i in range(n+1)] for j in range(q+1)]\nfor i in range(q):\n\tl,r=map(int,input().split())\n\tA[i]=[l,r]\nA.sort()\n#print(A)\nC=[0]*(n+1)\nfor i in range(1,q+1):\n\tC[A[i][1]]=1\n\tfor j in range(A[i-1][0],A[i-1][1]+1):\n\t\tC[j]=max(C[j],C[j-1])\n\t#print(C)\nprint(C[n])\n", "import sys\ninput = sys.stdin.readline\n\nn, q = list(map(int, input().split()))\npainters = [tuple(map(int, input().split())) for i in range(q)]\n\npainters.sort()\n\nans = 0\n\nl = 0\nr = n-1\n\nwhile l<=r:\n\tmid = (l+r)//2\n\tif painters[mid][0]==painters[mid+1][0]:\n\t\tans += 1\n\t\tl = mid+1\n\telse:\n\t\tr = mid-1\n\nprint(ans)\n", "def main():\n\tn, q = list(map(int, input().split()))\n\tpainters = [tuple(map(int, input().split())) for _ in range(q)]\n\tpainters.sort()\n\tleft, right, count = 0, painters[-1]\n\tans = 0\n\twhile right - left > 1:\n\t\tmid = (right + left) // 2\n\t\tif painters[mid] == left:\n\t\t\tright = mid\n\t\t\tans += 1\n\t\telse:\n\t\t\tleft = mid\n\t\t\tcount += 1\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from sys import stdin, stdout\nfrom math import ceil\nn, q = list(map(int, stdin.readline().split()))\nl = [0] * n\nfor i in range(q):\n\tl1, r1 = list(map(int, stdin.readline().split()))\n\tl[l1-1] = max(l[l1-1], r1-l1+1)\n\tr[r1-1] = max(r[r1-1], l[l1-1]-1)\nprint(n - min(l[n-2], r[n-2]))\n", "#dt = {} for i in x: dt[i] = dt.get(i,0)+1\nimport sys;input = sys.stdin.readline\n#import io,os; input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline #for \u00a0\u00a0\u00a0\u00a0pypy\ninp,ip = lambda :int(input()),lambda :[int(w) for w in input().split()]\n\nn,q = ip()\nx = [[] for i in range(n)]\nfor i in range(q):\n\tl,r = ip()\n\tx[l-1].append(r-1)\n\tx[r-1].append(l-1)\nans = 0\n#print(dt)\nfor i in range(n):\n\tif len(x[i]) == 1:\n\t\tans += 1\n\telse:\n\t\tans += len(x[i])\nprint(ans)\n", "n,q = map(int,input().split())\n\nl_p = [0] * n\nr_p = [0] * n\n\nfor i in range(q):\n\tl,r = map(int,input().split())\n\tl_p[l-1] = l\n\tr_p[r-1] = r\n\nans = 0\n\nfor i in range(q-2):\n\tans += r_p[i+1] - l_p[i]\n\nprint(ans)\n", "# coding: utf-8\nimport sys\nfrom bisect import bisect_left\n\nn, q = list(map(int, input().split()))\npainters = []\nfor i in range(q):\n\tl, r = list(map(int, sys.stdin.readline().split()))\n\tpainters.append((l, r))\n\npainters.sort()\n\n# print(painters)\n\n# print(len(painters) // 2)\n# print(len(painters) % 2)\n\n# print(len(painters) - 2)\n# print(painters[-2:])\n\n# print(len(painters) - 1)\n# print(len(painters) - 1)\n\n# print(painters[-2:])\n\n# print(len(painters) // 2)\n# print(len(painters) % 2)\n\n# print(painters[-2:])\n\n# print(len(painters) // 2)\n# print(len(painters) % 2)\n\n# print(len(painters) // 2)\n# print(len(painters) % 2)\n\n# print(len(painters) // 2)\n# print(len(painters) % 2)\n\n# print(len(painters) // 2)\n# print(len(painters) % 2)\n\n# print(len(painters) // 2)\n# print(len(painters) % 2)\n\n# print(len(painters) // 2)\n# print(len(painters) % 2)\n\n# print(len(painters) // 2)\n# print(len(painters) % 2)\n\n# print(len(painters) // 2)\n\n# print(len(painters) % 2)\n\n# print(len(painters) % 2)\n\n# print(len(painters) // 2)\n\n# print(len(painters) % 2)\n\n# print(len(painters) % 2)\n\n# print(len(pain", "import sys\n#sys.stdin = open(\"in\", \"r\")\ninput = sys.stdin.readline\nn, q = map(int, input().split())\n#n, m = map(int, input().split())\n#l = list(map(int, input().split()))\n#a = list(map(int, input().split()))\nans = 0\ncnt = 0\nfor i in range(q):\n\tl, r = map(int, input().split())\n\t#print(l, r)\n\tif l > r:\n\t\tans += r - l + 1\n\telse:\n\t\tcnt += r - l + 1\n\t\tans += 1\nprint(ans)\n", "from sys import stdin\nn, q = map(int, stdin.readline().split())\np = []\nfor i in range(q):\n\tl, r = map(int, stdin.readline().split())\n\tp.append((l, r, i))\np.sort()\n\ncnt = 0\nacc = [0] * (n + 1)\nfor l, r, i in p:\n\tcnt += (r - l + 1)\n\tacc[i] = cnt\n\nans = 0\nfor i in range(n + 1):\n\tans += acc[i]\n\tif ans >= n - 2:\n\t\tbreak\n\nprint(ans)\n", "import sys\nfrom math import inf\nfrom bisect import bisect_left\n\nn, q = map(int, sys.stdin.readline().split())\npainters = [tuple(map(int, sys.stdin.readline().split())) for i in range(q)]\n\n# print(painters)\n\npainters.sort()\n# print(painters)\n\n# print(len(painters) // 2)\n# print(len(painters) - 1)\n# print(len(painters) - 2)\n\nans = 0\nfor i in range(q - 2):\n\t# print(len(painters) // 2)\n\t# print(len(painters) - 1)\n\t# print(i)\n\t# print(painters[i][0], painters[i][1])\n\tans += min(bisect_left(painters[i], painters[i + 1][0]), bisect_left(painters[i + 1], painters[i][1]))\n\nprint(ans)\n", "from sys import stdin, stdout\nfrom math import gcd\nn, q = map(int, stdin.readline().split())\nl = [0] * n\nfor i in range(q):\n\tx, y = map(int, stdin.readline().split())\n\tl[x-1] = l[y-1] = 1\nfor i in range(1, n):\n\tif l[i] == 0:\n\t\tfor j in range(i):\n\t\t\tif l[j] == 0:\n\t\t\t\tl[j] = i\n\t\t\t\tbreak\n\t\tbreak\nans = 0\nfor i in range(1, n):\n\tans += (l[i] // gcd(l[i], n)) * (n - i)\nprint(ans)\n", "n, q = list(map(int, input().split()))\np = [list(map(int, input().split())) for i in range(q)]\np.sort()\n\nans = 0\n\n#print(p)\n\n\n\n\n\n#m = 10**10\n#s = 0\n\n#for i in range(q):\n#    m = min(m, p[i][1])\n\n#    s += p[i][0]\n\n#    if p[i][1] > m:\n#        ans += s - p[i][1]\n\n#        m = p[i][1]\n\n\n\n\n#print(ans)\n\n\n\n# for i in range(q):\n#    print(ans+p[i][1]-p[i][0])\n\n#print(len(list(filter(lambda x: x[1]<=p[i][0], p))))\n\n\n\n#for i in range(q):\n#    print(ans+p[i][1]-p[i][0])\n\n\n#m = 10**10\n#s = 0\n\n#for i in range(q):\n#    m = min(m, p[i][1])\n\n#    s += p[i][0]\n\n#    if p[i][1] > m:\n#        ans += s - p[i][1]\n\n#        m = p[i][1]\n\n\n#print(ans)\n\n#for i in range(q):\n#    print(ans+p[i][1]-p[i][0])\n\n#print(len(list(filter(lambda x: x[1]<=p[i][0], p))))\n\n\n#print(ans)\n#print(p[0])\n#print(p[1])\n#print(p[2])\n\n#print(p[3])\n\n#print(p[4])\n\n#for i in range(q):\n#    print(ans+p[i][1]-p[i][0])\n\n\n\n#q = [(i, r) for i, r in enumerate(p) if", "def solve():\n\tn, q = list(map(int, input().split()))\n\tp = [list(map(int, input().split())) for i in range(q)]\n\n\tp.sort()\n\n\tans = 0\n\tcurr = 0\n\tfor i in range(q - 2):\n\t\tl, r = p[i]\n\t\tcurr += 1\n\t\tif r < l:\n\t\t\tcontinue\n\t\tans += curr\n\t\tl, r = p[i + 2]\n\t\tcurr += 1\n\t\tif r < l:\n\t\t\tcontinue\n\tprint(ans)\n\n\ndef __starting_point():\n\tsolve()\n__starting_point()\n", "import sys\ninput = sys.stdin.readline\nn,q=list(map(int,input().split()))\nL=[]\nfor i in range(q):\n\tl,r=list(map(int,input().split()))\n\tL.append((l,r))\nL.sort()\n\nfrom bisect import bisect_left\n\nANS=0\n\ncnt=0\nfor i in range(q-2):\n\tl,r=L[i]\n\tif cnt<r-l+1:\n\t\tANS+=r-l+1\n\t\tcnt+=1\n\telse:\n\t\tif l==cnt:\n\t\t\tANS+=(r-cnt)\n\t\t\tcnt=0\n\t\t\tcontinue\n\t\telse:\n\t\t\tcnt+=1\n\t\t\tANS+=r-l\n\nprint(ANS)\n", "import sys\ninput = sys.stdin.readline\n\nn, q = list(map(int, input().split()))\n\npainters = []\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n\tpainters.append((l, r))\n\npainters.sort()\n\n# print(painters)\n\nans = 0\n\ncnt = 0\n\nfor p in painters:\n\t# print(p)\n\tif cnt >= q - 2:\n\t\tbreak\n\n\tans += 1\n\n\tif p[0] <= p[1]:\n\t\tcnt += 1\n\n\tif p[1] >= p[0]:\n\t\tcnt -= 1\n\nprint(ans)\n", "from sys import stdin\nfrom bisect import bisect_left\n\nn, q = list(map(int, stdin.readline().split()))\npainters = [tuple(map(int, stdin.readline().split())) for _ in range(q)]\n\nleft = [-1] * n\nright = [0] * n\n\nfor p in painters:\n\tleft[p[0]-1] = max(left[p[0]-1], p[1]-1)\n\tright[p[1]] = min(right[p[1]], p[0])\n\nans = 0\n\nfor i in range(n):\n\tif right[i] < left[i]:\n\t\tans += 1\n\nprint(ans)\n", "from sys import stdin, stdout\nfrom bisect import bisect_left\n\nn, q = map(int, stdin.readline().split())\n\npainters = []\nfor i in range(q):\n\tl, r = map(int, stdin.readline().split())\n\tpainters.append((l, r))\npainters.sort()\n\nbest = 0\ncount = 0\n\nfor i in range(q):\n\tif i == 0:\n\t\tcount = 0\n\telse:\n\t\tleft, right = painters[i]\n\t\tcount += (right - left) // 2\n\t\tbest = max(best, count)\n\nstdout.write(str(best) + '\\n')\n", "import sys\ninput = sys.stdin.readline\n\nn, q = list(map(int, input().split()))\npainters = [tuple(map(int, input().split())) for _ in range(q)]\n\npainters.sort()\n\nans = 0\n\nleft = 0\nright = n-1\n\nwhile left < right:\n\tmid = (left + right) // 2\n\tif painters[mid][0] < painters[mid+1][0]:\n\t\tleft = mid+1\n\telse:\n\t\tright = mid\n\n\tans += 1\n\nprint(ans)\n", "n, q = list(map(int, input().split()))\np = [[] for i in range(n)]\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n\tp[l-1].append(r-1)\n\tp[r-1].append(l-1)\np[1] = sorted(p[1], reverse=True)\nans = 0\nfor i in range(2):\n\tif len(p[i]) >= 2:\n\t\tans += len(p[i])\nprint(ans)\n", "n, q = map(int, input().split())\np = [tuple(map(int, input().split())) for i in range(q)]\np.sort()\n\nans = 0\nfor i in range(q - 2):\n\tl, r = p[i]\n\tans += 1\n\tfor j in range(i + 1, min(r, n) + 1):\n\t\tif p[j] < (l, r):\n\t\t\tans += 1\n\t\t\tbreak\nprint(ans)\n", "from sys import stdin\nn, q = list(map(int, stdin.readline().split()))\npainters = [tuple(sorted(list(map(int, stdin.readline().split())))) for i in range(q)]\n\npainters.sort()\n\n#print(painters)\n\nans = 0\n\nfor i in range(q - 2):\n\t#print(painters[i + 2], painters[i])\n\tif painters[i] == painters[i + 2][:-1]:\n\t\tans += 1\n\t\tcontinue\n\tleft, right = painters[i]\n\t#print(f'{left} {right} {i + 2}')\n\tif left < right:\n\t\tans += 1\n\t\tcontinue\n\n\t#print(f'{left} {right} {i + 2} {n - left - right}')\n\twhile left < right:\n\t\tmid = (left + right) // 2\n\t\tif painters[mid] == painters[i]:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid\n\n\t#print(f'{left} {right} {i + 2} {n - left - right}')\n\nprint(ans)\n", "# import sys\n# input=sys.stdin.readline\n\n\nn, q = map(int, input().split())\n\n# A = list(map(int, input().split()))\n\n# A = [list(map(int, input().split())) for i in range(q)]\n\n# A = sorted(A)\n\n# print(A)\n\n# B = [i for i in range(n)]\n\n# def func(x):\n#     if x == n-1:\n#         return 0\n#     B[x] = func(B[x])\n#     return B[x] + 1\n\n# ans = 0\n# for i in range(q-2):\n#     l, r = map(int, input().split())\n#     ans += func(r-l+1)\n\n# print(B)\n\n# print(ans)\n\n# A = sorted(list(range(n)), key=lambda i: B[i])\n\n# for i in range(q-2):\n#     l, r = map(int, input().split())\n#     ans += func(r-l+1)\n\n# print(ans)\n\n# print(A)\n\n# print(B)\n\n\ndef main():\n\tn, q = map(int, input().split())\n\n\tA = [[] for i in range(n+1)]\n\n\tfor i in range(q):\n\t\tl, r = map(int, input().split())\n\t\tA[l].append(r)\n\t\tA[r+1].append(l)\n\n\tans = 0\n\tfor i in range(n+1):\n\t\tif len(A[i]) < q-2:\n\t\t\tcontinue\n\t\tif len(A[i]) == q-2:\n\t\t\tans += n\n\n\t\tfor j in range(q-2, 0, -1):\n\t\t\tif len(A[i][j]) == 2:\n\t\t\t\tfor k in range(len(A[i][j])-1):\n\t\t\t\t\tif A[i][j][k] <= A[i][j][k+1]:\n\t\t\t\t\t\tcontinue\n", "from sys import stdin, stdout\nfrom math import gcd\nn, q = map(int, stdin.readline().split())\na = [list(map(int, stdin.readline().split())) for i in range(q)]\na.sort()\nans = 0\nfor i in range(q - 2):\n\tl, r = a[i]\n\tans += gcd(l, r)\nprint(ans)\n", "from sys import stdin\nfrom bisect import bisect_left\n\nn, q = list(map(int, stdin.readline().split()))\n\npainters = []\nfor _ in range(q):\n\tl, r = list(map(int, stdin.readline().split()))\n\tpainters.append((l, r))\n\npainters.sort()\n\nans = 0\n\nleft = [-1] * n\nright = [n] * n\n\nfor l, r in painters:\n\twhile left[l] < right[r] and l < r + 1:\n\t\tleft[l] = bisect_left(left, l)\n\t\tleft[r] = bisect_left(right, r)\n\t\tright[l] = bisect_right(right, r)\n\t\tright[r] = bisect_right(left, r)\n\n\tans += right[r] - left[r]\n\nprint(ans)\n", "import sys\nfrom collections import defaultdict\nfrom bisect import bisect_left, bisect_right\ndef input(): return sys.stdin.readline().strip()\n\nn, q = list(map(int, input().split()))\n\nA = []\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n\tA.append((r-l+1, l, r+1))\n\nA.sort()\n\nans = 0\n#print(A)\n\nfor i in range(q-2):\n\tl, x, r = A[i]\n\tans += 1\n\t#print(i+1, l, r, ans)\n\tif l == x:\n\t\tx = min(x, r-l+1)\n\telse:\n\t\tx = bisect_left(A, (r-l+1), lo=0, hi=len(A))\n\t\tx -= 1\n\t\t#print(i+1, l, r, x)\n\tif x < len(A):\n\t\tx = bisect_right(A, (r-l+1), lo=0, hi=len(A))\n\t\tx -= 1\n\t\t#print(i+1, l, r, x)\n\tif x < len(A):\n\t\tans += (len(A)-x)\n\telse:\n\t\tans += 1\n#print(ans)\nprint(ans)\n", "from sys import stdin, stdout\nfrom math import ceil\nn, q = list(map(int, stdin.readline().split()))\nl_min = [0]*n\nl_max = [0]*n\nans = 0\nfor _ in range(q):\n\tl, r = list(map(int, stdin.readline().split()))\n\tans += 1\n\tif l > r:\n\t\tl_max[r] = ans\n\telse:\n\t\tl_max[l] = max(l_max[l], ans)\n\t\tl_min[l-1] = ans\nprint(max(ceil((l_max[i+1]-l_min[i])/2 for i in range(q-2))))\n", "from sys import stdin\nfrom collections import defaultdict\nn, q = list(map(int, stdin.readline().split()))\n\nmin_r = [i for i in range(n)]\nmax_l = [i for i in range(n)]\nmin_r[0] = -1\nans = 0\nfor i in range(q):\n\tl, r = list(map(int, stdin.readline().split()))\n\tif l > min_r[l - 1]:\n\t\tmin_r[l - 1] = r - 1\n\t\tans += 1\n\telif r > max_l[r - 1]:\n\t\tmax_l[r - 1] = l - 1\n\t\tans += 1\n\telse:\n\t\tif l == max_l[l - 1]:\n\t\t\tans += 1\n\t\telse:\n\t\t\tmin_r[max_l[l - 1]] = min_r[l - 1]\n\t\t\tans += 1\n\nprint(ans)\n", "import sys\n\nn, q = list(map(int, sys.stdin.readline().strip().split()))\n\n# inf = open('in1', 'r')\n# reader = (list(map(int, line.strip().split())) for line in inf)\nreader = (list(map(int, sys.stdin.readline().strip().split())) for _ in range(q))\n\npainters = [tuple(reader[i]) for i in range(q)]\n\npainters.sort()\n\n# print(painters)\n\n# inf.close()\n\nans = 0\n\n# print(painters)\n\n# print(reader)\n\n# print(painters[0])\n# print(painters[-1])\n\n# print(len(painters)-2)\n\n# inf.close()\n\n# print(painters[-1])\n# print(painters[-2])\n\n# print(len(painters)-2)\n\n# inf.close()\n\n# print(painters[0])\n# print(painters[-1])\n\n# inf.write('3\\n1 1\\n2 2\\n3 4\\n')\n\n# inf.write('3\\n1 1\\n2 2\\n3 4\\n')\n\n# inf.write('3\\n1 1\\n2 2\\n3 4\\n')\n\n# inf.write('3\\n1 1\\n2 2\\n3 4\\n')\n\n# inf.write('3\\n1 1\\n2 2\\n3 4\\n')\n\n# inf.write('3\\n1 1\\n2 2\\n3 4\\n')\n\n# inf.write('3\\n1 1\\n2 2\\n3 4\\n')\n\n# inf.write('3\\n1 1\\n2 2\\n3 4\\n')\n\n# inf.write('3\\n1 1\\n2 2\\n3 4\\n')\n\n# inf.write('3\\n1 1\\n2 2\\n3 4\\n')\n\n# inf.write('3\\n1 1\\n2 2\\n3 4\\", "def main():\n\tfrom sys import stdin\n\tn, q = map(int, stdin.readline().split())\n\tp = [list(map(int, stdin.readline().split())) for i in range(q)]\n\tp.sort()\n\tres = 0\n\tfor i in range(q - 2):\n\t\ta, b = p[i]\n\t\tres += b - a\n\tprint(res)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "import sys\nfrom collections import defaultdict\nn,q = list(map(int,sys.stdin.readline().split()))\np = defaultdict(lambda :[])\nfor i in range(q):\n\tl,r = list(map(int,sys.stdin.readline().split()))\n\tp[(l,r)].append(i+1)\n\tp[(r,l)].append(i+1)\n\tp[(l,r)].sort()\n\tp[(r,l)].sort()\n\tcnt = 0\n\tfor i in p[(l,r)][::-1]:\n\t\tcnt += 1\n\t\tif cnt>=2:\n\t\t\tbreak\n\tprint(cnt)\n\t\t\n", "from sys import stdin\ninput = stdin.readline\nfrom bisect import bisect_left as bl\nn,q = list(map(int,input().split()))\np = [list(map(int,input().split())) for i in range(q)]\np.sort()\nans = 0\ntmp = 0\nfor i in range(q-2):\n\ttmp = bl(p,p[i][1])\n\tans+=len(p)-2\n\tp[i] = p[tmp]\nprint(ans)\n", "import sys\nimport math\n# sys.setrecursionlimit(10**6) \ninput = sys.stdin.readline\n\nn, q = list(map(int, input().split()))\n\npainters = []\nfor _ in range(q):\n\tl, r = list(map(int, input().split()))\n\tpainters.append((l, r, 0))\n\npainters.sort()\n\n# print(painters)\n\nanswer = 0\nfor i in range(q-2):\n\tl1, r1, cnt = painters[i]\n\tfor j in range(i+1, min(i+10, r1)+1):\n\t\tl2, r2, cnt2 = painters[j]\n\t\tif cnt2 + cnt >= cnt1:\n\t\t\tanswer += cnt1\n\t\t\tl1 = l2\n\t\t\tbreak\n\t\tif l1 > r1:\n\t\t\tbreak\n\t\tif l1 < l2:\n\t\t\tcnt1 += cnt2\n\t\t\tbreak\n\t\tif r1 < r2:\n\t\t\tcnt2 += cnt1\n\t\t\tbreak\n\tif cnt1 < cnt2:\n\t\tanswer += cnt1\n\nprint(answer)\n", "n,q = list(map(int,input().split()))\npainters = [tuple(sorted(list(map(int,input().split())))) for i in range(q)]\n\npainters.sort()\n\nans = 0\n\nwhile painters:\n\n\tleft, right = painters.pop()\n\n\tif left == right:\n\t\tans += 1\n\t\tcontinue\n\n\tm = 0\n\n\twhile left + 1 < right:\n\t\tm = max(m, left + 1)\n\t\tleft += 1\n\n\tright -= m\n\n\tans += right // (right - left + 1)\n\nprint(ans)\n\n", "n, q = list(map(int, input().split()))\np = [list(map(int, input().split())) for i in range(q)]\n\np.sort()\n\nans = 0\n\ncurrent = 0\n\nbetween = []\n\nfor i in range(q-2):\n\tif p[i][0] > p[i+1][1]:\n\t\tcurrent += 1\n\t\tbetween.append((p[i][0], p[i][1]))\n\telse:\n\t\tif current:\n\t\t\tbetween.append((p[i+1][0], p[i+1][1]))\n\t\t\tans += current\n\t\t\tcurrent = 0\n\t\telse:\n\t\t\tcurrent = 0\n\n\t\nwhile len(between)!= 0:\n\tleft, right = between.pop()\n\n\tif left < right:\n\t\tcurrent += right - left\n\t\tans += 1\n\telse:\n\t\tcurrent -= left\n\nprint(ans)\n", "def main():\n\tn, q = map(int, input().split())\n\tpainters = []\n\tfor i in range(q):\n\t\tl, r = map(int, input().split())\n\t\tpainters.append((l, r))\n\n\tpainters.sort()\n\n\tcnt = 0\n\tfor i in range(q - 2):\n\t\tl1, r1 = painters[i]\n\t\tif l1 <= r1:\n\t\t\tcnt += 1\n\tprint(cnt)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "from sys import stdin\nfrom bisect import bisect_left\nn, q = list(map(int, stdin.readline().split()))\npainters = []\nfor i in range(q):\n\tl, r = list(map(int, stdin.readline().split()))\n\tpainters.append((l, r))\npainters.sort()\n\nans = 0\nfor i in range(q-2):\n\tleft = bisect_left(painters, (painters[i][0], painters[i][1]))\n\tright = bisect_left(painters, (painters[i+1][0], painters[i+1][1]))\n\tans += right - left\n\nprint(ans)\n", "import sys\nn,q = list(map(int,input().split()))\np = []\nans = 0\nfor i in range(q):\n\tl, r = list(map(int,sys.stdin.readline().split()))\n\tp.append((l,r))\np.sort()\n\nfrom bisect import bisect_left\n\ndef get_ans(p):\n\tans = 0\n\tfor i in range(q-2):\n\t\tans += 1\n\t\tif p[i][0] == p[i+1][0]:\n\t\t\tans -= 1\n\treturn ans\n\nleft = -1\nright = n\nfor i in range(q-2):\n\tleft = max(left, p[i][0])\n\tright = min(right, p[i][1])\n\nprint(max(get_ans(p),get_ans(p[left+1:right])))\n", "n,q = list(map(int,input().split()))\n\nl = []\nfor i in range(q):\n\tl1,r1 = list(map(int,input().split()))\n\tl.append((l1,r1))\n\nl.sort()\n\nans = 0\n\nfor i in range(q-2):\n\tans+=len(set([l[i][1] for i in range(q)]))\n\nprint(ans)\n", "import sys\ninput=sys.stdin.readline\nn,q=list(map(int,input().split()))\nc=[[0]*(n+1)]\nfor i in range(q):\n\tl,r=list(map(int,input().split()))\n\tc[l][r]=1\nfor i in range(1,n+1):\n\tfor j in range(q-2,0,-1):\n\t\tif c[i][j]:\n\t\t\tc[i][j]+=c[i-1][j-1]\nans=0\nfor i in range(n+1):\n\tans+=c[i][n]\nprint(ans)\n", "def main():\n\tfrom sys import stdin\n\tinput = stdin.readline\n\tn, q = list(map(int, input().split()))\n\tpainters = [list(map(int, input().split())) for _ in range(q)]\n\tpainters.sort()\n\tbest = 0\n\tcnt = 0\n\tfor a, b in painters:\n\t\twhile cnt < b:\n\t\t\tbest += 1\n\t\t\tcnt += 1\n\t\tif a > b:\n\t\t\tbreak\n\t\tcnt -= 1\n\tprint(best)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "from sys import stdin\ninput = stdin.readline\n\nn, q = list(map(int, input().split()))\n\npainters = [tuple(map(int, input().split())) for _ in range(q)]\n\n# print(painters)\n\nsorted_painters = sorted(painters, key=lambda x: x[0])\n# print(sorted_painters)\n\n# print(len(sorted_painters))\n\n# print(len(set(painters[::2])))\n# print(len(set(painters[1::2])))\n\n# print(sorted_painters[-2])\n# print(sorted_painters[-1])\n\n# print(len(set(painters[::2])))\n# print(len(set(painters[1::2])))\n\n# print(len(set(painters[1::2])))\n\n# print(sorted_painters[0]) + len(set(painters[1::2])))\n\n# print(len(set(painters[::2])))\n# print(len(set(painters[1::2])))\n\n# print(len(sorted_painters[-2]) + len(set(painters[::2])))\n\n# print(len(set(painters[-1])))\n# print(len(set(painters[-2])))\n\n# print(len(set(painters[1::2])))\n\n# print(len(set(painters[::2])))\n\n# print(sorted_painters[-1]) + len(set(painters[::2])))\n\n# print(len(set(painters[-1])))\n\n# print(len(painters[-2])))\n\n# print(len(painters[-1])))\n\n# print(len(sorted_painters[-2])))\n\n# print(sorted_painters[-1]) + len(set(painters[-1])))\n\n# print(len(set(painters[-1])))\n\n# print(sorted_pain", "n, q = list(map(int, input().split()))\nl = [0] * n\nfor i in range(q):\n\tl1, r1 = list(map(int, input().split()))\n\tl[l1-1] = max(l[l1-1], r1 - l1 + 1)\n\tr[r1-1] = max(r[r1-1], l[r1-1] + 1)\nprint(n - min(l[-1], r[-1]))\n", "from sys import stdin\nn, q = map(int, stdin.readline().split())\nA = [list(map(int, stdin.readline().split())) for i in range(q)]\n\nA.sort()\n\nans = 0\n\nfor i in range(q - 2):\n\tl, r = A[i]\n\tans += 1\n\t\n\tfor j in range(i + 1, r):\n\t\tif A[j][0] < l:\n\t\t\tbreak\n\t\telse:\n\t\t\tans += 1\n\t\t\tl = max(l, A[j][1])\n\t\t\tr = min(r, A[j][0])\n\nprint(ans)\n", "def solve():\n\tn, q = map(int, input().split())\n\tleft = [0] * (n + 1)\n\tright = [0] * (n + 1)\n\tfor i in range(q):\n\t\tl, r = map(int, input().split())\n\t\tleft[l] += 1\n\t\tright[r] += 1\n\tans = 0\n\tfor i in range(1, n + 1):\n\t\tif left[i] == 0 and right[i] == 0:\n\t\t\tans += 1\n\t\telif left[i] == 0:\n\t\t\tleft[i] += right[i]\n\t\telif right[i] == 0:\n\t\t\tright[i] += left[i]\n\tprint(ans)\n\nn = int(input())\nsolve()\n", "def main():\n\tn, q = list(map(int, input().split()))\n\tl, ans = [0] * n, 0\n\tfor i in range(q):\n\t\ta, b = list(map(int, input().split()))\n\t\tl[a-1], l[b-1] = max(l[a-1], l[b-1]), 1\n\t\tans += b-a+1\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "import sys\n# sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\nn,q=list(map(int,input().split()))\nA=[]\nfor i in range(q):\n\tl,r=list(map(int,input().split()))\n\tA.append((l,r))\nA.sort()\nans=0\nfor i in range(q-2):\n\tans+=1\n\tif A[i][1]<=A[i+1][0]:\n\t\tans-=1\nprint(ans)\n", "import sys\ninput=sys.stdin.readline\nn,q=map(int,input().split())\nsection=[[0]*(n+2)]\nfor i in range(q):\n\tl,r=map(int,input().split())\n\tsection[l][r]=1\n\tsection[r+1][l]=1\nans=0\nfor i in range(n):\n\tfor j in range(n):\n\t\tif section[i][j]==1:\n\t\t\tans+=1\nprint(ans)\n", "n, q = list(map(int, input().split()))\nl_r = [list(map(int, input().split())) for i in range(q)]\n\nl_r.sort()\n\nl = []\nr = []\n\ncnt = 0\n\nfor i in range(q):\n\tl.append(l_r[i][0] - 1)\n\tr.append(l_r[i][1] - 1)\n\n#print(l, r)\n\nl.sort()\n#print(l, r)\n\nfor i in range(q):\n\tif l[i] > r[i]:\n\t\tcnt += 1\n\t\tcontinue\n\tcnt += r[i] - l[i]\n\t#print(l[i], r[i], cnt)\n\nprint(cnt)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "# from sys import stdin, stdout\n# n, q = list(map(int, stdin.readline().split()))\n# arr = [list(map(int, stdin.readline().split())) for i in range(q)]\n# arr = sorted(arr, key=lambda x: x[1])\n# ans = 0\n# for i in range(q-2):\n#     print(i+1)\n#     left = arr[i][0]\n#     right = arr[i+1][1]\n#     for j in range(i+2, len(arr)):\n#         if arr[j][0] < left and arr[j][1] > right:\n#             ans += 1\n#             left = arr[j][0]\n#             right = arr[j][1]\n#             break\n#         if arr[j][0] < left and arr[j][1] <= right:\n#             ans += 1\n#             right = arr[j][1]\n#             break\n#         if arr[j][0] <= left and arr[j][1] >= right:\n#             ans += 1\n#             left = arr[j][0]\n#             right = arr[j][1]\n#             break\n# print(ans)\n\n# 3\n\n\n\n# 2\n# 1 4\n# 4 5\n# 5 6\n# 6 7\n# 3 5\n\n\n\n# 3\n# 1 1\n# 2 2\n# 3 4\n\n\n\nn, q = list(map(int, input().split()))\n\npainters = [list(map(int, input().split())) for i in range(q)]\n\npainters.sort()\n\n\nans = 0\nfor i in range(q-2):\n\tl = painters[i][0]\n\tr = painters[i][1]\n\tcnt = 0\n\tfor j in range(i+1, len(painters)):\n\t\tif painters[j][0] < l and painters[j][1] <= r:\n\t\t\tcnt += 1\n\tans += cnt\n\nprint(ans)\n", "n, q = map(int, input().split())\npainters = [tuple(map(int, input().split())) for _ in range(q)]\n\npainters.sort()\n\nleft = [0] * (n + 1)\nright = [0] * (n + 1)\nfor l, r in painters:\n\tleft[l] = left[l + 1]\n\tright[r] = right[r + 1]\n\nans = 0\nfor i in range(1, n + 1):\n\tans += left[i]\n\tright[i] = ans\n\nprint(n - ans)\n", "n, q = list(map(int, input().split()))\npainters = [tuple(map(int, input().split())) for i in range(q)]\n\npainters.sort()\n\nres = 0\n\nfor i in range(q - 2):\n\tl, r = painters[i]\n\tres += min(r - l + 1, n - l)\n\nprint(res)\n", "n,q = list(map(int,input().split()))\nA = [tuple(map(int,input().split())) for i in range(q)]\n\nA.sort()\n\nans = 0\n\ncurrent = 0\n\nfor i in range(q - 2):\n\tif A[i][0] == A[i + 1][0]:\n\t\tcurrent += 1\n\telse:\n\t\tans += current\n\t\tcurrent = 0\n\nprint(ans)\n", "def main():\n\tn, q = list(map(int, input().split()))\n\tpainters = [tuple(sorted(list(map(int, input().split())))) for _ in range(q)]\n\tpainters.sort()\n\tp = 0\n\tfor i in range(q - 2, -1, -1):\n\t\tl, r = painters[i]\n\t\tif l >= r:\n\t\t\tp += n - (r - l + 1)\n\t\t\tcontinue\n\t\twhile l < r:\n\t\t\tm = (l + r) // 2\n\t\t\tif painters[m][0] < l:\n\t\t\t\tl = m + 1\n\t\t\telse:\n\t\t\t\tr = m\n\t\tif l < r:\n\t\t\tp += r - l + 1\n\tprint(p)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nfrom bisect import bisect_left\n\nn, q = list(map(int, input().split()))\npainters = [tuple(map(int, input().split())) for i in range(q)]\n\n# print(painters)\n# print(len(painters) // 2)\n# print(len(painters) % 2)\n# print(len(painters) - 1)\n\npainters.sort()\n# print(painters)\n\nresult = 0\nwhile len(painters) > 1:\n\tleft, right = painters.pop()\n\tif len(painters) == 1:\n\t\tbreak\n\t# print(painters)\n\t# print(len(painters) - 1)\n\tresult += (right - left) // 2\n\tleft, right = painters.pop()\n\t# print(left, right)\n\tpainters.append((left, right))\n\nprint(result)\n", "n, q = map(int, input().split())\np = [list(map(int, input().split())) for i in range(q)]\np.sort()\n\nans = 0\n\nlast = 0\nfor i in range(q-2):\n\twhile p[i][0] <= last:\n\t\tans += 1\n\t\tlast = p[i][1]\n\nprint(ans+1)\n", "import sys\nn, q = map(int, input().split())\np = [0] * n\nfor i in range(q):\n\tl, r = map(int, sys.stdin.readline().split())\n\tp[l-1] = max(p[l-1], r-l+1)\n\tp[r-1] = max(p[r-1], r-l+1)\nprint(n-max(p))\n", "n, q = map(int, input().split())\nl_ranges = []\nr_ranges = []\nfor i in range(q):\n\tl, r = map(int, input().split())\n\tl_ranges.append((l, r))\n\tr_ranges.append((l, r))\nl_ranges.sort()\nr_ranges.sort()\n\nans = 0\nfor l, r in l_ranges:\n\tleft = 0\n\tright = n - 1\n\twhile right - left > 1:\n\t\tmid = (right + left) // 2\n\t\tif l_ranges[mid][0] <= r_ranges[mid][1]:\n\t\t\tright = mid\n\t\telse:\n\t\t\tleft = mid\n\tans += right - left + 1\nprint(ans)\n", "def solve(A):\n\tans = 0\n\tA.sort()\n\tfor i in range(1, len(A)):\n\t\tif A[i] < A[i-1]:\n\t\t\tans += 1\n\t\t\tbreak\n\treturn ans\n\n\nn, q = map(int, input().split())\nA = [tuple(map(int, input().split())) for _ in range(q)]\nprint(solve(A))\n", "n, q = map(int, input().split())\n\nl_r = [list(map(int, input().split())) for i in range(q)]\n\nl_r.sort()\n\nans = 0\n\nfor i in range(q - 2):\n\n\tif len(l_r) == 1:\n\t\tbreak\n\n\tl, r = l_r[i]\n\n\tif l + 1 == r:\n\t\tans += 1\n\n\telse:\n\t\tans += len(range(l + 1, r + 1))\n\nprint(ans)\n", "from sys import stdin, stdout\nfrom collections import defaultdict\nn, q = list(map(int, stdin.readline().split()))\na = [list(map(int, stdin.readline().split())) for i in range(q)]\na.sort()\nans = 0\nc = defaultdict(int)\nfor i in range(q-1):\n\tans += 1\n\tc[a[i][1]] += 1\n\tc[a[i+1][0]] -= 1\n\tc[a[i][1]] += 1\n\tc[a[i+1][0]] -= 1\nprint(ans)\n", "n, q = map(int, input().split())\np = [list(map(int, input().split())) for i in range(q)]\np.sort()\n\na = [0] * n\nans = 0\n\nfor i in range(q-2):\n\ta[p[i][0]-1] += 1\n\ta[p[i][1] - 1] -= 1\n\tans += 1\n\nprint(ans)\n", "def main():\n\tn, q = list(map(int, input().split()))\n\tp = sorted([tuple(map(int, input().split())) for i in range(q)], key=lambda x: x[1])\n\tcnt = 0\n\tfor i in range(q - 2):\n\t\tif p[i][0] <= p[i + 1][1]:\n\t\t\tcnt += 1\n\tprint(cnt)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "n, q = map(int, input().split())\nl1, l2, ans = [], [], 0\nfor i in range(q):\n\tl, r = map(int, input().split())\n\tl1.append(l)\n\tl2.append(r)\n\tans += r - l + 1\nl1.sort()\nl2.sort()\nwhile len(l1) and len(l2):\n\tif len(l1) > len(l2):\n\t\tl1.pop()\n\t\tl2.pop()\n\t\tcontinue\n\tif l1[-1] < l2[0]:\n\t\tl1.pop()\n\t\tcontinue\n\tans += l1[-1] - l2.pop()\nprint(ans)\n", "from sys import stdin\nfrom bisect import bisect_left, bisect_right\nn, q = list(map(int, stdin.readline().split()))\npainters = [tuple(map(int, stdin.readline().split())) for i in range(q)]\n\nans = 0\np = [0] * n\nfor i in range(q-2):\n\tl, r = painters[i]\n\tans += 1\n\tfor j in range(l, r+1):\n\t\tp[j] = max(p[j], p[j-1] + 1)\n\nprint(n - min(p[-1], ans))\n", "n, q = list(map(int, input().split()))\npainters = [tuple(map(int, input().split())) for i in range(q)]\n\npainters.sort()\n\n#print(painters)\n\n#print(painters[-2:])\n#print(painters[0:-2])\n\n#print(len(painters)-2)\n\n#print(len(painters)-2, painters[-2])\n#print(len(painters)-2, painters[0:-2])\n\n#print(painters[0])\n\n#print(painters[-2])\n\n#print(len(painters)-2, painters[0])\n\n#print(len(painters)-2, painters[1])\n\n#print(len(painters)-2, painters[1])\n\n#print(len(painters)-2, painters[2])\n\n#print(len(painters)-2, painters[3])\n\n#print(len(painters)-2, painters[2])\n\n#print(len(painters)-2, painters[3])\n\n#print(len(painters)-2, painters[4])\n\n#print(len(painters)-2, painters[4])\n\n#print(len(painters)-2, painters[5])\n\n#print(len(painters)-2, painters[5])\n\n#print(len(painters)-2, painters[6])\n\n#print(len(painters)-2, painters[6])\n\n#print(len(painters)-2, painters[7])\n\n#print(len(painters)-2, painters[8])\n\n#print(len(painters)-2, painters[9])\n\n#print(len(painters)-2, painters[10])\n\n#print(len(painters)-2, painters[11])\n\n#print(len(painters)-2", "import sys\ninput = sys.stdin.readline\n\nn, q = map(int, input().split())\npainters = [tuple(map(int, input().split())) for _ in range(q)]\n\nans = 0\npainters.sort()\n\nleft = 0\nright = n-1\n\nwhile left < right:\n\tmid = (left+right)//2\n\tif painters[mid][0] < painters[mid+1][0]:\n\t\tleft = mid+1\n\telse:\n\t\tright = mid\n\nprint(right - left + 1)\n", "import sys\ninput = sys.stdin.readline\n\nn, q = list(map(int, input().split()))\npainters = [tuple(map(int, input().split())) for i in range(q)]\n\npainters.sort()\n\n# print(painters)\n\n# print(len(painters) // 2)\n\n# print(len(painters) - 1, len(painters) - 2)\n\n# print(painters[-1], painters[-2])\n\n# print(len(painters)-1)\n\n# print(painters[-2])\n\n# print(len(painters)-1)\n\n# print(painters[-3])\n\n# print(len(painters)-2)\n\n# print(painters[-3])\n\n# print(len(painters)-2)\n\n# print(len(painters)-1)\n\n# print(painters[-2])\n\n# print(len(painters)-1)\n\n# print(painters[-3])\n\n# print(len(painters)-2)\n\n# print(len(painters)-1)\n\n# print(painters[-3])\n\n# print(len(painters)-2)\n\n# print(painters[-3])\n\n# print(len(painters)-1)\n\n# print(painters[-2])\n\n# print(len(painters)-1)\n\n# print(painters[-3])\n\n# print(painters[-3])\n\n# print(len(painters)-2)\n\n# print(len(painters)-1)\n\n# print(painters[-3])\n\n# print(painters[-2])\n\n# print(painters[-1])\n\n# print(len(painters)-1)\n\n# print(len(painters)-2)\n\n# print(len(painters)-2)\n\n# print(painters[-1])\n\n# print(len(painters)-2)\n\n# print(painters[-3])\n", "import sys\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\nINF = 10**18\nMOD = 10**9 + 7\n\nn, q = MAP()\n\n#a = list2d(n+1, n+1)\n#s = list2d(n+1, n+1)\n#l = list2d(n+1, n+1)\n#r = list2d(n+1, n+1)\n\nans = 0\n\nfor i in range(q):\n\tl, r = MAP()\n\tans += ceil(r-l)\n\nprint(ans)\n", "n, q = list(map(int, input().split()))\np = [0] * n\nc = 0\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n\tc += 1\n\tif l > r:\n\t\tl, r = r, l\n\tp[l] = c\n\tp[r] = c\nprint(n - min(p))\n", "from sys import stdin\ninput=stdin.readline\nn,q=list(map(int,input().split()))\np=[]\nfor i in range(q):\n\tl,r=list(map(int,input().split()))\n\tp.append((l,r,i))\np.sort()\nans=0\nfor i in range(q-2,-1,-1):\n\tl,r,i=p[i]\n\tans+=1\n\twhile l<=r:\n\t\tl+=1\n\t\tr-=1\n\t\tif i<len(p) and p[i][0]<=l:\n\t\t\tl,r,i=p[i]\n\tif r<l:\n\t\tbreak\nprint(ans)\n", "n, q = list(map(int, input().split()))\np = [0] * n\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n\tp[l - 1] = min(p[l - 1], r - l)\n\tp[r - 1] = min(p[r - 1], l - r + 1)\nprint(n - min(p[n - 1], p[n - 2]))\n", "from sys import stdin\n\nn, q = list(map(int, stdin.readline().split()))\npainters = [list(map(int, stdin.readline().split())) for _ in range(q)]\n\npainters.sort()\n\nleft = [0] * (n + 1)\nright = [0] * (n + 1)\ncnt = 0\nfor l, r in painters:\n\twhile left[l] < right[r]:\n\t\tleft[r] += 1\n\t\tcnt += 1\n\t\tright[r] += 1\n\nprint(cnt)\n", "import sys\nimport math\n# sys.setrecursionlimit(10**6) \ninput=sys.stdin.readline\n\nn,q=list(map(int,input().split()))\n\nl=[0]*n\nfor i in range(q):\n\tl1,r1=list(map(int,input().split()))\n\tl[l1-1]=max(l[l1-1],r1-l1+1)\n\n# print(l)\n\nprint(n-max(l))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport bisect\n\nn, q = list(map(int, input().split()))\npainters = [tuple(sorted(list(map(int, input().split())))) for _ in range(q)]\n\npainters.sort()\n\n# print(painters)\n\n# print(len(painters) // 2)\n\n# print(painters[-1])\n# print(painters[-2])\n# print(painters[-3])\n# print(painters[-4])\n\n# print(painters[-5])\n\n# print(painters[-6])\n\n# print(painters[-7])\n\n# print(painters[-3])\n\n# print(painters[-2])\n\n# print(painters[-1])\n\n# print(len([p for p in painters if p[0] < p[1]]))\n\n# print(len([p for p in painters if p[0] <= p[1]]))\n\n# print(len([p for p in painters if p[0] >= p[1]]))\n\n# print(len([p for p in painters if p[0] <= p[1] <= p[2]]))\n\n# print(len([p for p in painters if p[0] >= p[1] <= p[2]]))\n\n# print(len([p for p in painters if p[0] <= p[1] >= p[2] >= p[3]]))\n\n# print(len([p for p in painters if p[0] >= p[1] <= p[2] >= p[3]]))\n\n# print(len([p for p in painters if p[0] <= p[1] >= p[2] >= p[3]]))\n\n# print(len([p for p in painters if p[0] <= p[1] >= p[2] <= p[3] >= p[4]]))\n\n# print(len([p for p in painters if p[0]"]}}